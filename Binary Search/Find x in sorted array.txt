PROBLEM:
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
________________________________________________________________________________________________________________________
CODE:
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid; // target found
            } else if (nums[mid] < target) {
                left = mid + 1; // search in the right half
            } else {
                right = mid - 1; // search in the left half
            }
        }

        return -1; // target not found
    }
}
_________________________________________________________________________________________________________________________
SOLUTION:
1)Initialize left index with 0 and right index with (array.length -1)
2)Loop through array untill right index crosses left one
3)find mid
-->check if element on mid is target if yes return mid
-->else if element on mid is less than target traverse right half by increamenting left as mid + 1
-->else if element on mid is greater than less than target traverse left half by decrementing right as mid -1
4)if mid element has not found through out traversal, target does not exist so return -1
