PROBLEM:
Given two strings s and t, return true if t is an 
anagram
 of s, and false otherwise.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false
__________________________________________________________________________________________________________________________
CODE and EXPLAINATION:
Approach 1:
import java.util.HashMap;

class Solution {
    public boolean isAnagram(String s, String t) {
        // Step 1: Check if lengths are the same
        if (s.length() != t.length()) {
            return false;
        }

        // Step 2: Create a frequency map for both strings
        HashMap<Character, Integer> countMap = new HashMap<>();

        // Count characters in the first string
        for (char c : s.toCharArray()) {
            countMap.put(c, countMap.getOrDefault(c, 0) + 1);
        }

        // Decrease the count based on the second string
        for (char c : t.toCharArray()) {
            if (!countMap.containsKey(c)) {
                return false; // Character in t not in s
            }
            countMap.put(c, countMap.get(c) - 1);
            if (countMap.get(c) < 0) {
                return false; // More occurrences in t than in s
            }
        }

        return true; // If all counts are zero, it's an anagram
    }
}

Approach2:
class Solution {
    public boolean isAnagram(String s, String t) {
        // Step 1: Check if lengths are the same
        if (s.length() != t.length()) {
            return false;
        }

        // Step 2: Create an array to store character frequencies
        int[] count = new int[26]; // Array for lowercase English letters

        // Step 3: Update counts for both strings
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++; // Increment for string s
            count[t.charAt(i) - 'a']--; // Decrement for string t
        }

        // Step 4: Check if all counts return to zero
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) {
                return false; // Not an anagram
            }
        }

        return true; // Is an anagram
    }
}

Approach3:
import java.util.Arrays;

class Solution {
    public boolean isAnagram(String s, String t) {
        // Step 1: Check if lengths are the same
        if (s.length() != t.length()) {
            return false;
        }

        // Step 2: Sort both strings
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        Arrays.sort(sArray);
        Arrays.sort(tArray);

        // Step 3: Compare sorted strings
        return Arrays.equals(sArray, tArray);
    }
}
__________________________________________________________________________________________________________________________
