class Solution {
    
    public void mergeSort(int[] arr, int low, int high) {
        
        System.out.println("low: " +low+ ", high: "+high+", array initial: "+ Arrays.toString(arr));
        // Base case: when the segment has zero or one element
        if (low >= high) {
            return;
        }

        int mid = low + (high - low) / 2; // Calculate the midpoint based on low and high
        System.out.println("mid " + mid);
    
        // Recursively sort both halves
        mergeSort(arr, low, mid);      // Sort the left half
        System.out.println("Recursive left array " + Arrays.toString(arr));
        mergeSort(arr, mid + 1, high); // Sort the right half
        System.out.println("Recursive right array " + Arrays.toString(arr));

        // Merge the sorted halves
        merge(arr, low, mid, high);
    }

    private void merge(int[] arr, int low, int mid, int high) {
        int[] left = Arrays.copyOfRange(arr, low, mid + 1);
        System.out.println("left array " + Arrays.toString(left));
        int[] right = Arrays.copyOfRange(arr, mid + 1, high + 1);
        System.out.println("right array " + Arrays.toString(right));

        int i = 0, j = 0, k = low;

        // Merge while there are elements in both left and right
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        // Copy remaining elements from left (if any)
        while (i < left.length) {
            arr[k++] = left[i++];
        }

        // Copy remaining elements from right (if any)
        while (j < right.length) {
            arr[k++] = right[j++];
        }
        
        System.out.println("after array " + Arrays.toString(arr));
    }

    public static void main(String[] args) {
        int[] arr = {38, 27, 43, 3, 9, 82, 10};
        mergeSort(arr);
        System.out.print("Sorted array: ");
        System.out.println(Arrays.toString(arr));
    }
}
__________________________________________________________________________________________________________________________________________________________________________

NOTES:
--> follows divide-and-conquer algorithm, divides the array into smaller subarrays, sorts them, and then merges them back together in a sorted manner.
