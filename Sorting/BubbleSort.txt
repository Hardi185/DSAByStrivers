class BubbleSort {
    
    // Method to perform the bubble sort
    public void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                //match adjacents in inner loop
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j] and arr[j + 1] (adjacents)
                    swap(arr, j, j + 1);
                }
            }
            System.out.println("After pass " + (i + 1) + ": " + java.util.Arrays.toString(arr));
        }
    }
    
    // Method to swap two elements in the array
    private void swap(int[] arr, int index1, int index2) {
        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    public static void main(String[] args) {
        BubbleSort sorter = new BubbleSort();
        int[] arr = {5, 3, 8, 4, 2};
        System.out.println("Original Array: " + java.util.Arrays.toString(arr));
        sorter.bubbleSort(arr);
        System.out.println("Sorted Array: " + java.util.Arrays.toString(arr));
    }
}
_____________________________________________________________________________________________________________________________________________________________________________

NOTES: [Swap adjacents and greatest one will be at last in first pass, works like that]

1)Have inner and outer loop for traversing 
2)Compare and switch the adjacents in inner loop
3)swap adjacents based on condition

Example:
Pass 1: [3, 5, 4, 2, 8]
Pass 2: [3, 4, 2, 5, 8]
Pass 3: [3, 2, 4, 5, 8]
Pass 4: [2, 3, 4, 5, 8]

