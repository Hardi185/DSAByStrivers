PROBLEM:
Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.

Examples :

Input: LinkedList : 1->2->3->4->5
Output: 5
Explanation: Count of nodes in the linked list is 5, which is its length.

Input: LinkedList : 2->4->6->7->5->1->0
Output: 7
Explanation: Count of nodes in the linked list is 7. Hence, the output is 7.
__________________________________________________________________________________________________________________________
CODE:
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Solution {
    // Function to count nodes of a linked list.
    public int getCount(Node head) {
        if (head == null) {
            return 0;
        }
        
        int count = 1;
        Node current = head;
        while (current.next != null) {
            current = current.next;
            count++;
        }
        
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Creating Solution instance to call getCount method
        Solution solution = new Solution();
        int length = solution.getCount(head);

        // Printing the length of the linked list
        System.out.println("Length of the linked list: " + length);
    }
}
__________________________________________________________________________________________________________________________
EXPLANATION:
Traverses the linked list from the head to the end, counting each node to determine the length.
